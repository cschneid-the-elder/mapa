/*
Copyright (C) 2024 Craig Schneiderwent.

The author(s) accept no liability for damages of any kind resulting 
from the use of this software.  Use at your own risk.

This software may be modified and distributed under the terms
of the MIT license. See the LICENSE file for details.
*/


lexer grammar CICSzLexer;

@lexer::members {
	int parenNesting = 0;
	
	/*
	These Booleans are intended to be set by an invoking application.  It
	is syntactically correct for portions of a CICS command to be commented
	out in a way that is syntactically correct for the host language.
	*/
	public static Boolean pliCode = false;
	public static Boolean classicCOBOLCode = false;
	public static Boolean freeFormCOBOLCode = false;
	public static Boolean cCode = false;
}

fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');

fragment SPLAT: '*';
fragment SLASH: '/';
fragment GT: '>';

fragment CLASSIC_COBOL_COMMENT_FLAG
	: (~[\n\r] ~[\n\r] ~[\n\r] ~[\n\r] ~[\n\r] ~[\n\r] SPLAT)
	{!freeFormCOBOLCode && classicCOBOLCode && getCharPositionInLine() == 7}?
	;

CLASSIC_COBOL_COMMENT
	: (CLASSIC_COBOL_COMMENT_FLAG .*? [\n\r])
	->channel(HIDDEN)
	;

FREE_FORM_COBOL_COMMENT
	: (SPLAT GT ~[\n\r]* [\n\r])
	{(classicCOBOLCode | freeFormCOBOLCode)}?
	->channel(HIDDEN)
	;

PLI_COMMENT
	: (SLASH SPLAT .*? SPLAT SLASH)
	{pliCode}?
	->channel(HIDDEN)
	;

C_COMMENT
	: (
	(SLASH SPLAT .*? SPLAT SLASH)
	| (SLASH SLASH ~[\n\r]* [\n\r])
	)
	{cCode}?
	->channel(HIDDEN)
	;

EXEC_CICS
	: E X E C (U T E)? [ ]+ C I C S
	;

END_EXEC
	: E N D HYPHEN E X E C DOT?
	;

HYPHEN
	: '-'
	;

DOT
	: '.'
	;

SEMICOLON
	: ';'
	;

/*
The nongreedy suffix is necessary to make the CLASSIC_COBOL_COMMENT_FLAG 
work correctly.
*/
WS
	: [ \n\r\t]+?
	->skip
	;

/*
This token indicates an argument to a token follows.
*/

LPAREN
	: '('
	->pushMode(ARG_MODE)
	;

/*

NOHANDLE, RESP, and RESP2 are anomalously documented as parameters
for SPOOLCLOSE, SPOOLOPEN, SPOOLREAD, and SPOOLWRITE.  I'm leaving
these here in case that changes.

NOHANDLE
	: N O H A N D L E
	;

RESP
	: R E S P
	;

RESP2
	: R E S P '2'
	;
*/


