--2025-06-04--------------------------------------------------------------------
Per notification from Eduarth Heinen, removed hardcoded /home/craig in...

Makefile
testList90
testList91
nistList

...as this is unlikely to be anyone else's home directory name.  

I did not remove /home/craig from...

testListAWS
testListAWS-cpy

...as I would have to modify Java code (probably in CobolSource.java) to
resolve ~.  Possibly with replaceFirst("^~", System.getProperty("user.home"));

Also updated the readme.md file with some limitations of the CallTree
application in the "What This Won't Do" section.

--2025-02-12--------------------------------------------------------------------
Added LSACHECK compiler option.

Updated jsonGeneratePhrase1 and jsonParsePhrase1 to allow NULL per PH59733.

--2024-12-30--------------------------------------------------------------------
Fixed lexer definition of REVERSE_VIDEO per William Fahle issue 219.

Added missing Screen Section attributes to screenDescriptionEntry.

Also added Screen Section attributes to popMode in CobolLexer.g4 PIC_MODE,
except not SIZE and TIME as the GNU COBOL documentation is currently kind
of iffy of what they do.

--2024-11-20--------------------------------------------------------------------
Modified parser rules ifThen and ifElse per issue 215.  Simplified to just...

  statement+

...instead of...

  (NEXT SENTENCE | statement*)

...as the statement rule includes the nextSentenceStatement rule.  Also, the
original probably should have had parentheses around NEXT SENTENCE or made
use of the nextSentenceStatement rule as in the issue 215 writeup.

Thank you to William Fahle.

Side note, it is apparently syntactically correct (though pointless) 
to code...

  IF A = B
      NEXT SENTENCE
      NEXT SENTENCE
  END-IF.

...as GnuCOBOL 3.2.0 allows it without complaint.

--2024-10-16--------------------------------------------------------------------
Removed ./lib directory and its contents.  They were redundant.  Updated 
Makefile accordingly.

--2024-10-15--------------------------------------------------------------------
ANTLR 4.13.2, Makefile, manifest, and src/tester changes.  New CICSz.jar,
DB2zSQL.jar, DLI.jar.

--2024-05-28--------------------------------------------------------------------
New CICSz.jar.  Fixed bug in Makefile when copying new CICSz.jar from cics
directory to cobol directory.

--2024-05-26--------------------------------------------------------------------
Removed obsolete tokens from CobolLexer.g4

EXECCICSTAG
EXECSQLTAG
EXECSQLIMSTAG
EXECCICSLINE
EXECSQLIMSLINE
EXECSQLLINE
 
--2024-05-19--------------------------------------------------------------------
Added code to CobolSource.java to do a minimalist check for a non-UTF8 code
page in the event an Identification Division cannot be found in the file being
processed.

The check is for a byte = 0x25 which is EBCDIC for a newline.

--2024-05-17--------------------------------------------------------------------
Added sample RDBMS DDL for tables to hold output.

Added script to split output into separate files suitable for loading into
RDBMS tables.

Updated ExecCicsStatement.java to eliminate apostrophes, quotes, and trim
spaces from literal values.

--2024-05-16--------------------------------------------------------------------
Integrated handling of EXEC DLI statements.

--2024-05-13--------------------------------------------------------------------
Corrected handling of SQLIMS statements, which were being improperly processed
as syntactically incorrect SQL statements.  I think they're done correctly now.

Fixed CopyStatement.apply() to not complain about SQLDA, SQLIMSCA, and 
SQLIMSDA INCLUDEs.

Added IMSSEGMENTs to output CSV.

--2024-05-11--------------------------------------------------------------------
Resolve CICS API and SPI calls whose target is a COBOL identifier.  

For example...

    EXEC CICS READ FILE(A-FILE-NAME) ...

...is now reported as a CICSREAD of the value of A-FILE-NAME.

These are not de-duplicated, by which I mean if there are multiple READs coded
with the same COBOL identifier, they are all reported.  This is because 
eliminating the duplicates turned into a nasty mess of loops modifying the
collections being iterated over.  Also, the READs could have significantly
different options, e.g. UPDATE, and someone might want to investigate that.

This is similar to how COBOL dynamic CALLs are resolved, but there are enough
differences that I abandoned an effort to consolidate the code I perceived as
common to CallWrapper and ExecCicsStatement into a superclass.  Some things
are simply not meant to be.

Also cleaned up some TODOs in a separate commit.

--2024-04-17--------------------------------------------------------------------
Rebuild after local drive failure.

Added "init" target to Makefile.

ExecCicsStatement.java parseCicsCommand() method modified to handle CICS
commands all on one line.

--2024-04-14--------------------------------------------------------------------
Integrated CICSz parser.  Previously, EXEC CICS commands were parsed in a
hand-coded and not very robust fashion.  Now there are ANTLR lexer and parser
grammars for the CICS API and SPI commands and these are used instead.

The CicsWord and CicsKeywordWithArg classes are obsolete and have been removed.

The ExecCicsStatement class has been revised and... well, this is kind of 
interesting.  When the CallEtAlListener is walking the parse tree of a COBOL
program and notices an EXEC CICS statement, it instantiates an 
ExecCicsStatement.  The ExecCicsStatement then uses the CICSz ANTLR grammar
to parse the EXEC CICS statement.  Since we're interested in the arguments to
some of the CICS commands, we then walk the CICS command parse tree with 
CICSzCommandListener and save the pertinent arguments.  Those arguments are (in
this case) either COBOL literals or COBOL identifiers, so we then use the COBOL
grammar again in concert with an IdentifierEtAlListener to retrieve the 
literal(s) or identifier(s).

So whilst executing an ANTLR listener we invoke another parser and another
listener, and whilst doing that we invoke the original parser and yet another
listener.

Still to do: do with the API arguments for non-LINK and non-XCTL work like 
LINK and XCTL, i.e. match identifiers and their values.  Right now this only
works as I'd like with literals.

--2024-03-11--------------------------------------------------------------------
Add support for free form source code.

--2024-03-08--------------------------------------------------------------------
Merged update to CopyStatement.java by Bernardo Nascimento.  Rebuilt jar.

--2023-11-28--------------------------------------------------------------------
ANTLR 4.13.1 migration.

--2023-11-03--------------------------------------------------------------------
Fixed cicsWord in CobolParser.g4 to include CODEPAGE.  Not sure how this got
left out, as the testLocalx for test9022.cbl checks for it.

--2023-10-31--------------------------------------------------------------------
Updates per IBM documentation this date.

Syntax for function prototypes added to lexer and parser.  Updates to account
for function prototypes not actually being programs, mostly allowing for an
empty parse tree.

Syntax for ENCODING phrase of JSON GENERATE and JSON PARSE added.

--2023-02-10--------------------------------------------------------------------
ANTLR 4.11.1 migration.  Makefile, manifest file, modified to use
new antlr-4.11.1-complete.jar file.  CallTree.jar regenerated.

New edition of DB2zSQL.jar added.

--2023-01-31--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2023-01-25--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2023-01-24--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2023-01-09--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2023-01-03--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-12-28--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-12-14--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-12-06--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-11-11--------------------------------------------------------------------
Added CONDCOMP compile option and test cases to testdata/local/test9001.cbl.

Fixed problem with functionIntrinsicPhrase rule, it wasn't processing all the
individual functions specified.  It's a bit too cozy with ANTLR internals, but
I see no other way to deal with the syntax.  Modified test9024.cbl and
test9025.cbl in testdata/local to verify.  Must use make testrigx and visually
check to see functions are seen as such and not table entries.

--2022-11-04--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-11-03--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-11-02--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-09-18--------------------------------------------------------------------
Expanding on how CALL <identifier> statements are resolved.  Previously...

01  Work-Areas.
    05  PGM1 PIC X(8) Value 'PGM00001'.
    05  PGMA PIC X(8) Value 'PGM00004'.
    05  PGM2 PIC X(8) Value Spaces.
    
[...]

    CALL 'PGM00009'         *> scenario 1
    CALL PGM1               *> scenario 2
    MOVE 'PGM00002' TO PGM2
    CALL PGM2               *> scenario 3
    MOVE PGMA TO PGM2
    CALL PGM2               *> scenario 4
    
...scenario 4 would be unresolved.  Now it is.  Changes were made to...

src/CallWrapper.java
	the #selectDataNode method takes advantage of DDNode::matches
src/CobolProgram.java
	modified #findAllTheRightMoves to search for MOVEs in scenario 4
src/DDNode.java
	added two #matches methods
src/Identifier.java
	added the tableCall bits to #getDataNameText and #getInDataText
src/MoveStatement.java
	added a sendingIdentifier instance variable
src/TestIntegration.java
testdata/local/testantlr?23.cbl.

--2022-09-10--------------------------------------------------------------------
Fixing how COPY statements are resolved.  The rewriting of the source text was
incorrect.  Bug exposed by Amazon Web Services in COACTUPC.cbl in their
aws-mainframe-modernization-carddemo repository.

CopyReplaceParent.java In createStringBuilderFromTerminalNodeWrappers()
replaced...

	if (extraPadding < 0) extraPadding = 0;

...with..

	if (extraPadding < 0 || !token.isPrecededByWhitespace()) extraPadding = 0;

...because if a token isn't preceded by whitespace it doesn't need extra
padding.  This is some of the ugliest code in the application.

Added test9041.cbl and test9041.cpy to test this behavior.

--2022-09-07--------------------------------------------------------------------
The DATASET option of READ, WRITE, REWRITE, et. al. is now detected.  This
option is no longer documented, but was used by Amazon Web Services in their
aws-mainframe-modernization-carddemo repository.

CicsKeywordWithArg.java
Altered constructor from...

		if (this.keyword.equals("FILE")) {
			this.isFile = true;
		}

...to...

		if (this.keyword.equals("FILE") || this.keyword.equals("DATASET")) {
			//DATASET is so old it is no longer documented
			this.isFile = true;
		}

...and added a test case to test9017.cbl.

--2022-08-17--------------------------------------------------------------------
Removal of TODOs.

CallWrapper.java
Removed obsolete instance variable inDataCtxs and its initialization.
Simplified some of the code in...
	private void initialize(
			CobolParser.LiteralContext litCtx
			, CobolParser.IdentifierContext idCtx
			, CallType litCallType
			, CallType idCallType
			) {
...to just use the getText() superclass method instead of working their way
down the tree of getters.

CharDataLineWrapper.java
Removed unused label in cloneTerminalNodeWrapperList().
Made method cloneTerminalNodeWrapperList() private.

PseudoTextWrapper.java
Removed commented out code in constructor.

ReplaceOffStatement.java
Removed commented out instance variable line and its initialization.

TestIntegration.java
Added unit tests for testantlr?67.cbl testing for proper handling of CALL
<identifier> (<subscript>) syntax.

Added testantlr?67.cbl unit tests with CALL <identifier> (<subscript>) syntax.

New edition of DB2zSQL.jar added.

--2022-08-05--------------------------------------------------------------------
New edition of DB2zSQL.jar added.

--2022-06-02--------------------------------------------------------------------
Modified CobolLexer.g4 and CobolParser.g4 per the 202x draft standard to allow 
for Procedure Division Rounded phrase, acceptScreenStatement.

Corrected (probably harmless) errata in Allocate statement.

Added booleanExpression for computeStatement.  This was slightly odd, in that
ANTLR can't distinguish between arithmeticExpression and booleanExpression 
with certainty.  Parsing errors abounded until I made booleanExpression an
alternative within the arithmeticExpression rule.

Added "after" syntax to continueStatement.

Added deleteStatementFormat2, changed name of deleteStatement to
deleteStatementFormat1 and created new deleteStatement rule which is either
format1 or format2.

Added displayStatementFormat2, refactored existing rules into displayStatement
and displayStatementFormat1.

Added raisingPhrase to the (now considered archaic) PROGRAM form of 
exitStatement.

Added raisingPhrase and statusPhrase to gobackStatement.

Updated initializeStatement and inspectStatement.

Added invokeStatement. The draft standard and IBM Enterprise COBOL 6.4 differ
pretty significantly.

Added sharingPhrase and retryPhrase to openStatement.

Added performWithExceptionCheckingStatement form of PERFORM statement.

Added raiseStatement.

Added readLockPhrase to readStatement and changed readWith to not require
KEPT | NO before LOCK as this isn't in either the standard nor in IBM's
documentation.

Added standardReceiveStatement, leaving alone the receiveStatement inherited 
from the original ProLeap parser.  This appears to be vestigal, as the
Communication Section is no longer in the standard.

Added USE statement format 3 (exception-name) and format 4 (exception-object).

Added standardSendStatement, leaving alone the sendStatement inherited
from the original ProLeap parser.  This appears to be vestigal, as the
Communication Section is no longer in the standard.

Modified sendToStatement to allow setting ADDRESS OF. Added 
setScreenAttributeStatement.

Added stopStatementWith to stopStatement.

Added suppressStatement and unlockStatement.

Added FILE syntax, retryPhrase, and lockPhrase to writeStatement.

Added new intrinsic functions from 202x draft standard and IBM Enterprise
COBOL 6.4 documentation.

Added fixedPhrase to callStatement per IBM COBOL 6.4 documentation.

Added testdata/local/test9040.cbl to test these changes.

Added new compile options SMARTBIN and JAVAIOP and compiler directives 
JAVA-CALLABLE and JAVA-SHARED to CobolPreprocessorLexer.g4 and 
CobolPreprocessorParser.g4.

Modified testdata/local/test9001.cbl and testdata/local/test9002.cbl to
test these changes.

Added some documentation in Makefile on various testing options.

New edition of DB2zSQL.jar added.

--2022-05-26--------------------------------------------------------------------
Modified CobolLexer.g4 and CobolParser.g4 to allow for Picture Clause Editing
and Locale phrases.  This further complicates the lexer, as additional ANTLR
modes are required, or at least that's the only way I can see to allow for
the syntax.  

testdata/local/test9039.cbl added to test these changes.

--2022-05-26--------------------------------------------------------------------
Fixed incorrect implementation of constantEntry in CobolParser.g4 and added
representative class ConstantEntry.  Modified DataDescriptionEntryListener,
CobolProgram, CondCompVar, and CallWrapper to allow for potential syntax...

       Process DEFINE(GRAYZA,'PGM00001')
       Identification Division.
       Program-ID.    testantlr066.
       Data Division.
       Working-Storage Section.
       01  PGM1 Constant From GRAYZA.
       01  PGM2 Constant As   'PGM00002'.
       Procedure Division.
           Call PGM1
           Call PGM2
           Goback
           .

...adding testdata/local/testantlr?66.cbl to verify.

--2022-05-25--------------------------------------------------------------------
Modified CobolLexer and CobolParser per draft 202x Data Division
specifications.

Added screenDescriptionConstantEntryClause to screenDescriptionEntry.

Modified fileDescriptionEntry clauses to allow both BYTES and CHARACTERS, added
the formatClause, and modified codeSetClause adding codeSetAlphabetPhrase1 and
codeSetAlphabetPhrase2.

Added dataConstantRecordClause, dataPropertyClause, dataSameAsClause, 
dataSelectWhenClause, dataBasedClause, and dataAnyLengthClause to
dataDescriptionEntryFormat1.

Added BINARY-*, FLOAT-*, MESSAGE-TAG, et. al. entries to dataUsageClause.

Added STRONG to dataTypeDefClause.

Added testdata/local/test9038.cbl.

--2022-05-21--------------------------------------------------------------------
Modified CobolLexer and CobolParser per draft 202x Environment Division
specifications.

Added characterClassificationClause to Object-Computer paragraph.  Added
testdata/local/test9035.cbl.

Modified alphabetClauseFormat1, alphabetClauseFormat2; added localeClause,
dynamicLengthStructureClause, orderTableClause to Special-Names paragraph.

Added testdata/local/test9036.cbl.

Added testdata/local/testantlr?65.cbl specifically to test the context
sensitive nature of the PICTURE token, which means one thing in the
currencySignClause and needs to cause a mode switch in the Data Division.  It
turns out nothing in the NIST test suite includes this syntax, maybe it's new
since then.

Modified environmentSwitchNameSpecialNamesStatusPhrase substituting dataName
for condition as the former is (not obviously) what was intended in the
standard.

The draft standard I'm working from specifies...

    "When ORDER TABLE is specified, ordering-name-1 references a cultural 
    ordering table that is identified by literal-9 and constructed in 
    accordance with ISO/IEC 14651:2011, Appendix A, Common Template Table. 
    The implementor specifies the allowable content of literal-9."

...which I'm taking to mean literal-9 is just any literal.  FYI, ISO/IEC
14651:2011 has been withdrawn, superceded by ISO/IEC 14651:2016 which has
also been withdrawn, superceded by ISO/IEC 14651:2019 which has also been
withdrawn, superceded by ISO/IEC 14651:2020.

Modified assignClause rule in parser, adding USING syntax and allowing for 
multiple device names or literal names, and AssignClause class to account 
for these changes.

Added lockModeClause and sharingClause to fileControlParagraph.  Added an
ANTLR semantic predicate to disallow PASSWORD from being recognized in the
assignClause as it is a reserved word in IBM COBOL and it was
messing with recognition of the token as the first part of passwordClause
and mistakenly taking it for another assignClauseName in assignmentClause.

Added applyCommitClause to ioControlClause.

--2022-05-18--------------------------------------------------------------------
Modified CobolLexer and CobolParser per draft 202x Identification Division
specifications.  Added Class-ID, Function-ID, Factory, Method-ID, Interface-ID,
Object, and Options paragraphs.

Further modification to functionCall to make the paren-args-paren construct
merely optional instead of allowing 0..n of them.

Also fixed tableCall rule to require subscripting, as otherwise it's not really
a tableCall.  It was also confusing recognition of singleton identifiers and
messing with my logic to resolve CALL IDENTIFIER statements.

Output file has two new record types, one for FUNCTION and one for CLASS.  The
rest of the fields mimic those for PGM.

--2022-05-16--------------------------------------------------------------------
Modified both lexers to understand floating literal continuations and
TheCLI.writeOutTerminalNodes() to process them correctly.  Added literal types
BX, NX, U, and UX.  Test cases testantlr?64.cbl added.

This is per the draft COBOL 202x standard.

--2022-05-14--------------------------------------------------------------------
Modified  CobolPreprocessorLexer.g4 and CobolPreprocessorParser.g4 to understand
draft COBOL 202x new compiler directives...

CALL-CONVENTION
COBOL-WORDS
DISPLAY
FLAG-02
FLAG-14
LEAP-SECOND
LISTING
PAGE
POP
PROPOGATE
PUSH
REF-MOD-ZERO-LENGTH
SOURCE FORMAT
TURN

...and added test9029.cbl to verify.  Note there is no code to take any action
based on these directives, they're merely tolerated by the lexer and the
parser.  My current thinking is COBOL-WORDS will result in a message indicating
lexing and parsing is likely to fail, when/if I get around to coding some sort
of action.

--2022-05-12--------------------------------------------------------------------
Modified CobolParser.g4 to account for Repository paragraph.  Also added 
actions to collect function names and a sematic predicate to functionName
so a functionCall isn't mistaken for a tableCall.

--2022-04-16--------------------------------------------------------------------
Modified a number of files to account for the inexcusable deprecation of
_all_ of the constructors for Integer.  "Boxing" indeed.

Fixed a bug in CopyReplaceParent.applyReplacingPhrase() that caused
testdata/nist/SM202A to resolve K2SEA incorrectly.  A newline removed
by CopyReplaceParent.subListTerminalNodeWrapper() was not accounted
for properly.

Fixed a bug in CopyReplaceParent.createStringBuilderFromTerminalNodeWrappers()
that caused EXEC CICS ... END-EXEC to have the END-EXEC in the wrong
position and resulted in a parse error.  That code was written prior to the
addition of CICS_TEXT (and SQL_TEXT) in the lexer, and didn't properly
account for differences between those (non-COBOL) formats and the rest of
a COBOL program.

Added some text to Makefile to indicate how to build from scratch.  This was
not something I'd ever had to do and it turned out to be simple, once I
figured out what order to build things.

Renamed CobolPreprocessorParserTerminalNodeListener.java to
PreprocessorParserTerminalNodeListener.java to eliminate problems in building
from scratch.

