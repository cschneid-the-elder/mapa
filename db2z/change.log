--2024-11-18--------------------------------------------------------------------
Changed TIME ZONE to (TIME ZONE) | TIMEZONE) per Maarten van Haasteren.  This
is yet another case where DB2 is more lenient than the documentation indicates.
Parser rules affected...

builtInType
functionBuiltInType
procedureBuiltinType
createTypeArrayBuiltinType
createVariableBuiltInType
castBuiltInType
timeZoneSpecificExpression

Also modified DSNUTIL_TIMESTAMP_WITH_TIME_ZONE in the lexer to allow both
TIME ZONE and TIMEZONE.

--2024-10-29--------------------------------------------------------------------
Changed wlmEnvironmentOption1 to wlmEnvironmentOption2 in
createFunctionStatementExternalScalarOptions and
createFunctionStatementExternalTableOptions per Erwin Veenstra.  It appears
the syntax diagram in the IBM documentation has been incorrect since at least
April of 2000.

wlmEnvironmentOption1 is now commented out and can be removed.  I'm leaving it
there for now as a reminder that my source documents are the product of human
effort at are thus not _necessarily_ correct.  That this doesn't happen more
often is actually quite impressive.

--2024-10-22--------------------------------------------------------------------
Added NOKEYDELETE to INDEXDEFER option of LOAD.

Added AI_COMMONALITY function.

Added test cases for GETVARIABLE scalar function.

Added syntax for STRIP function, which is identical to the TRIM function.

Added new syntax for DB2 13 FL506 to INSERT statement VALUES clause...

  INSERT INTO ARCONIA (NAME, FLOOR)
  VALUES ('CHARLES', 7), ('OLIVER', 8), ('MABEL', 9);
  
 ...and...
 
   INSERT INTO ARCONIA (NAME)
   VALUES 'CHARLES', 'OLIVER', 'MABEL'

...are now valid.

--2024-10-18--------------------------------------------------------------------
Added syntax for TRIM function per Martijn Rutte.  Added new lexer tokens in
support of TRIM function to sqlKeyword parser rule.

--2024-10-16--------------------------------------------------------------------
Removed ./lib directory and its contents.  They were redundant.  Updated 
Makefile and src/tester accordingly.

--2024-10-15--------------------------------------------------------------------
ANTLR 4.13.2, Makefile and src/tester changes.

--2024-06-04--------------------------------------------------------------------
Added TIMEOUT to parser rule sqlKeyword per Maarten van Haasteren.

--2024-06-01--------------------------------------------------------------------
Removed unused tokens...

SQLBLOCKCOMMENTBEGIN
SQLBLOCKCOMMENTEND
MINUTEMINUTES

...from the lexer.

--2024-05-12--------------------------------------------------------------------
Added fragments...

	| BINARYSTRINGLITERAL
	| GRAPHICSTRINGLITERAL
	| GRAPHICUNICODESTRINGLITERAL

...to NONNUMERICLITERAL.  These have been missing since the inception of the
DB2z lexer grammar.  The first is needed for the DB2 13 FL505 INTERPRET
scalar function, which has also been added.

The pattern for HEXLITERAL has been modified to include a-f (lower case) as
the IBM documentation currently states...

  A hexadecimal digit is a digit or any of the letters A through F. If 
  the MIXED DATA subsystem parameter is set to YES, hexadecimal digits 
  in a hexadecimal constant must be specified in upper case. Otherwise, 
  an error might be returned when SQL statements are processed.

...which at least implies that if the MIXED DATA subsystem parameter is not 
set to YES, hexadecimal digits in a hexadecimal constant need not be specified 
in upper case.

--2024-04-17--------------------------------------------------------------------
Rebuild after local drive failure.

Added "init" target to Makefile.

--2024-04-03--------------------------------------------------------------------
Per Martijn Rutte, to handle alternate syntaxes and literals delimited by two
apostrophes...

Added dsnutilUCSFullOrChangelimit to dsnutilUCSCopySpecOptions.

Added DSNUTIL_DB_TS_HEX_LIT_DOUBLE_APOS in lexer mode DSNUTIL_DB_TS_MODE and
parser rule dsnutilUCSArg.

(DSNUTIL_UNLOAD_DATA | DSNUTIL_UNLOAD) added to dsnutilUCSUnload.

Made dsnutilUCSRegisterOption optional in dsnutilUCSShrlevelChangeSpec3.

Added...

| (DSNUTIL_DB_TS_DOUBLE_APOS DSNUTIL_DOUBLE_APOS_CHAR* DSNUTIL_DOUBLE_APOS1)
| (DSNUTIL_PAREN_DOUBLE_APOS DSNUTIL_DOUBLE_APOS_CHAR* DSNUTIL_DOUBLE_APOS1)

... to dsnutilUCSArg.

Added fragment DOUBLE_APOS_STRINGLITERAL to lexer and to lexer
rule NONNUMERICLITERAL.  This is to handle literals delimited with two
apostrophes codes as part of arbitrary SQL within the third argument to 
DSNUTILx, delimited by EXEC SQL [...] ENDEXEC.  Added new Boolean 
dsnutilEXECSQL to support this.

Added DSNUTIL_DB_TS_DOUBLE_APOS to lexer, again to support literals delimited
by two apostrophes.

Added DSNUTIL_DB_TS_RPAREN as a termination option for 
dsnutilUCSLoadFieldListOption.

Simplified dsnutilUCSSortdataOption.

Trailing comma tolerated in dsnutilUCSLoadFieldListOption.

Made everything following DSNUTIL_DECIMAL optional in 
dsnutilUCSLoadDecimalSpec.

Made trailing options in dsnutilUCSUnloadFieldSpecificationChar
actually optional.

dsnutilUCSUnload now allows for dsnutilUCSUnloadSpec options to be before,
after, or both before and after the dsnutilUCSFromTableSpec2.

Added dsnutilUCSArgInParens? following DSNUTIL_MIXED in 
dsnutilUCSLoadFieldSpecificationChar.

Fixed typo in dsnutilUCSDsnDataclasOption, removing erroneous "r" between
that made it read dsnurtilUCSDsnDataclasOption.  Also added optional
DSNUTIL_EQUAL? before dsnutilUCSArgOptionalParens.

I've modified the following in a similar fashion to 
dsnutilUCSDsnDataclasOption, adding an optional DSNUTIL_EQUAL before 
the dsnutilUCSArgOptionalParens.  My reasoning is that if it's allowed for one
of these dataset options then it's likely allowed for them all.

dsnutilUCSDsnUnitOption
dsnutilUCSDsnBufnoOption
dsnutilUCSDsnMgmtclasOption
dsnutilUCSDsnStorclasOption
dsnutilUCSDsnRetpdOption
dsnutilUCSDsnVolumesOption
dsnutilUCSDsnVolcntOption
dsnutilUCSDsnUncntOption
dsnutilUCSDsnGdgLimitOption
dsnutilUCSDsnDispOption
dsnutilUCSDsnLimitOption
dsnutilUCSDsnTimeOption
dsnutilUCSDsnBlkszlimOption
dsnutilUCSDsnSpaceOption
dsnutilUCSDsnPctprimeOption
dsnutilUCSDsnMaxprimeOption
dsnutilUCSDsnNbrsecndOption
dsnutilUCSDsnDirOption
dsnutilUCSDsnDsntypeOption
dsnutilUCSDsnStackOption
dsnutilUCSDsnTrtchOption
dsnutilUCSDsnSubsysOption
dsnutilUCSDsnLreclOption
dsnutilUCSDsnRecfmOption
dsnutilUCSPathFiledataOption
dsnutilUCSPathPathoptsOption
dsnutilUCSPathPathmodeOption
dsnutilUCSPathPathdispOption

Made all the options of dsnutilUCSRecoverNosyscopyOption optional.

Made dsnutilUCSCCSIDPhrase in dsnutilUCSUnloadClobfSpec optional.

Added "dsnutil = false;" to DSNUTIL_OPEN_QUOTE to fix problem with third
DSNUTILx parameter being delimited with '"' and also containing
EXEC SQL ... ENDEXEC with a literal embedded.

--2024-03-26--------------------------------------------------------------------
Per Martijn Rutte, added dsnutilUCSDsnumOption to 
dsnutilUCSModifyRecoveryOptions and dsnutilUCSSortnumOption to 
dsnutilUCSRunstatsTablespaceStatisticsSpec.

--2024-03-25--------------------------------------------------------------------
Martijn Rutte noted there is alternate syntax for partition-element in the
CREATE TABLE statement.  Added partitioningClauseElementAlternateSyntax.

Martijn Rutte noted the syntax...

 WHERE (A, B, C) IN (SELECT X, Y, Z FROM T1 WHERE M IS NULL)

...is valid.  Modified the expression parser rule to read (in part)...

	| (LPAREN expression (COMMA expression)* RPAREN)

...instead of...

	| LPAREN expression RPAREN

...to make the parser recognize this syntax.  Which did entail tracing through
the whereClause, searchCondition, predicate, and inPredicate parser rules.

--2024-02-28--------------------------------------------------------------------
Allow PART(3 : 5) in addition to PART(3:5) and PART(3).  Prior to this change,
the (3:5) would have been tokenized by the lexer as...

[@31,90:90='(',<DSNUTIL_LPAREN>,6:7]
[@32,91:93='3:5',<DSNUTIL_PAREN_IDENTIFIER>,6:8]
[@33,94:94=')',<DSNUTIL_RPAREN1>,6:11]

...now it will be tokenized as...

[@31,90:90='(',<DSNUTIL_LPAREN>,6:7]
[@32,91:91='3',<DSNUTIL_PAREN_NUMBER>,6:8]
[@33,92:92=':',<DSNUTIL_PAREN_COLON>,6:9]
[@34,93:93='5',<DSNUTIL_PAREN_NUMBER>,6:10]
[@35,94:94=')',<DSNUTIL_RPAREN1>,6:11]

...which makes a bit more sense.  This is in addition to allowing the spaces
embedded in the argument.

Added...

	| (sqlplStartLabel? setSpecialRegisterStatement)

...to sqlplProcedureStatement parser rule per Maarten van Haasteren.

Removed NEWLINE from first line of SQLCOMMENT lexer rule per Maarten van
Haasteren as it caused a lexer error when the last line of the input was
a comment.

--2024-02-03--------------------------------------------------------------------
Modifying many parser rules to allow optional parentheses around a keyword
argument.  In consultation with Martijn Rutte we decided to guard against the
need for future "one off" changes to add optional parentheses and just make the
changes to allow them as the IBM documentation indicates.  Affected rules...

 dsnutilUCSDrainWaitOption
 dsnutilUCSRetryOption
 dsnutilUCSRetryDelayOption
 dsnutilUCSExceptions
 dsnutilUCSSortnumOption
 dsnutilUCSParallelOption
 dsnutilUCSParallelOption2
 dsnutilUCSCheckIndex
 dsnutilUCSFromCopyDsnOption
 dsnutilUCSDiagnoseMessageOrTraceID
 dsnutilUCSLoadInddnOption
 dsnutilUCSLoadDiscardsOption
 dsnutilUCSImplicitTZOption
 dsnutilUCSStatclgmemsrtOption
 dsnutilUCSStatTableSpecName1
 dsnutilUCSSampleOption
 dsnutilUCSRepeatableOption
 dsnutilUCSFreqval1
 dsnutilUCSFreqval2
 dsnutilUCSHistogram1
 dsnutilUCSHistogram2
 dsnutilUCSDelimitedOptions
 dsnutilUCSPartOption1
 dsnutilUCSIntoTableSpecDDNOption
 dsnutilUCSIntoTableSpecNumrecsOption
 dsnutilUCSIntoTableSpecWhenOption
 dsnutilUCSMergecopyWorkddnOption
 dsnutilUCSOptionsKey
 dsnutilUCSOptionsListdefddOption
 dsnutilUCSOptionsTemplateddOption
 dsnutilUCSOptionsFilszOption
 dsnutilUCSDelayOption
 dsnutilUCSRecover
 dsnutilUCSTorbaOption
 dsnutilUCSRestorebeforeOption
 dsnutilUCSReorgIndexLeafdistlimitOption
 dsnutilUCSReorgTablespace
 dsnutilUCSDiscarddnOption
 dsnutilUCSDropPartOption
 dsnutilUCSIclimitDasdOption
 dsnutilUCSIclimitTapeOption
 dsnutilUCSOffposlimitSpec
 dsnutilUCSTableSpec2LimitOption
 dsnutilUCSHeaderOption
 dsnutilUCSReportTablespaceListOption
 dsnutilUCSArchlogOption
 dsnutilUCSStospace
 dsnutilUCSDsnBufnoOption
 dsnurtilUCSDsnDataclasOption
 dsnutilUCSDsnMgmtclasOption
 dsnutilUCSDsnStorclasOption
 dsnutilUCSDsnRetpdOption
 dsnutilUCSDsnVolumesOption
 dsnutilUCSDsnVolcntOption
 dsnutilUCSDsnUncntOption
 dsnutilUCSDsnGdgLimitOption
 dsnutilUCSDsnTimeOption
 dsnutilUCSDsnPctprimeOption
 dsnutilUCSDsnMaxprimeOption
 dsnutilUCSDsnNbrsecndOption
 dsnutilUCSDsnDirOption
 dsnutilUCSDsnSubsysOption
 dsnutilUCSDsnLreclOption
 dsnutilUCSDsnRecfmOption
 dsnutilUCSUnloadSourceSpec
 dsnutilUCSMaxerrOption
 dsnutilUCSMaxroOption
 dsnutilUCSLoadCopydictionaryOption

These rules needed custom solutions to allow optional parentheses in order
to preserve backward compatibility.

 dsnutilUCSLoadSortkeysOption
 dsnutilUCSTablesampleOption1
 dsnutilUCSTablesampleOption2
 dsnutilUCSNewmaxroOption
 dsnutilUCSLonglogOption
 dsnutilUCSReorgIndexUnloadOption
 dsnutilUCSReorgIndexUnloadOption 
 dsnutilUCSSortnpsiOption
 dsnutilUCSShrlevelNoneSpec
 dsnutilUCSShrlevelReferenceSpec1
 dsnutilUCSShrlevelReferenceSpec2
 dsnutilUCSShrlevelChangeSpec1
 dsnutilUCSShrlevelChangeSpec2
 dsnutilUCSShrlevelChangeSpec3
 dsnutilUCSIsolationCSOption
 dsnutilUCSIsolationUROption
 dsnutilUCSUnloadExternalSpec
 dsnutilUCSLocateTablespaceSpecRidOption
 dsnutilUCSLocateTablespaceSpecPageOption
 dsnutilUCSRepairDeleteStatement
 dsnutilUCSSystempagesStatement
 dsnutilUCSDeleteProfileOption
 dsnutilUCSDsnTrtchOption
 dsnutilUCSPathFiledataOption
 dsnutilUCSUnloadFloatOption
 dsnutilUCSIncludeNpi
 dsnutilUCSDsnBlkszlimOption
 dsnutilUCSTimeoutOption
 dsnutilUCSDrainOption
 dsnutilUCSDeadlineOption
 dsnutilUCSSwitchtimeOption
 dsnutilUCSShrlevelOption
 dsnutilUCSUtilxSpec
 dsnutilUCSCheckDataAuxerror
 dsnutilUCSCheckDataLoberror
 dsnutilUCSCheckDataXmlerror
 dsnutilUCSCheckDataDelete
 dsnutilUCSDsnumOption
 dsnutilUCSFlashcopyOption
 dsnutilUCSFromCopyDsnOption
 dsnutilUCSListdefDefinedOption
 dsnutilUCSLoadEnforceOption
 dsnutilUCSRbalrsnConversionOption
 dsnutilUCSLoadRowformatOption
 dsnutilUCSLoadIndexdeferOption
 dsnutilUCSForceOption
 dsnutilUCSLoadResumeSpecShrlevelOption
 dsnutilUCSUpdateOption
 dsnutilUCSHistoryOption
 dsnutilUCSTableStatsColumnAll
 dsnutilUCSDecfloatSpec
 dsnutilUCSFormatSpecOptions
 dsnutilUCSModifyRecoveryFlashcopy
 dsnutilUCSModifyRecoveryRetainOption
 dsnutilUCSModifyStatisticsDeleteOption
 dsnutilUCSRebuildIndexShrlevelOption
 dsnutilUCSScopeOption2
 dsnutilUCSRecoverNosyscopyOption
 dsnutilUCSFlashcopyPprcpOption
 dsnutilUCSRecoverImageCopySpec
 dsnutilUCSReorgIndexShrlevelOption
 dsnutilUCSTimestamp
 dsnutilUCSRowformatOption
 dsnutilUCSUnloadContinuePauseOnlySpec
 dsnutilUCSSortdataOption
 
Also added a new parser rule dsnutilUCSCCSIDPhrase, factoring out code used in
a number of places and incorporating the optional parentheses.  Affected
rules...

 dsnutilUCSLoadFieldSpecificationChar
 dsnutilUCSUnloadFieldSpecificationChar
 dsnutilUCSUnloadClobfSpec
 dsnutilUCSLoadFieldSpecificationVarchar
 dsnutilUCSUnloadFieldSpecificationVarchar
 dsnutilUCSUnloadFieldSpecificationClob
 dsnutilUCSLoadFieldSpecificationDbclob
 dsnutilUCSUnloadFieldSpecificationDbclob
 dsnutilUCSClobOptions
 dsnutilUCSVargraphicOptions
 dsnutilUCSGraphicOptions
 dsnutilUCSClobfOptions
 dsnutilUCSDbclobfOptions

Added new parser rule...

 dsnutilUCSUnlddnSpec

...to ease addition of optional parentheses to dsnutilUCSCatmaint.

--2024-02-02--------------------------------------------------------------------
Applied fixes from Martijn Rutte to...

dsnutilUCSCheckDataErrddn
dsnutilUCSCheckDataWorkddn
dsnutilUCSSortdevtOption
dsnutilUCSScopeOption

...which allow optional parentheses around the keyword argument.

The parentheses are not in the syntax diagram in IBM's documentation
as of this date but are tolerated by DB2.

After a bit of digging I find the following in the IBM documentation...

    To specify a utility option, specify the option keyword, followed by its 
    associated parameter or parameters, if any. The parameter value can be a 
    keyword. You need to enclose the values of some parameters in parentheses. 
    The syntax diagrams for utility control statements show parentheses where 
    they are required.

...which indicates to me that parentheses are either mandatory (where 
indicated) or allowed, maybe, I guess.  This is from the "Utility control 
statements" section under the "Invoking Db2 online utilities" section under the
"Db2 online utilities" section under the "Db2 Utilities" section of the Db2 13
for z/OS documentation.  Identical wording is present in the DB2 version 6 for
z/OS documentation.

--2024-02-01--------------------------------------------------------------------
Changed sqlplVariableDeclaration to fix problem reported by Martijn Rutte where
the syntactically valid...

    DECLARE W_S_Q_L_I_D         CHAR(128) CCSID EBCDIC FOR SBCS DATA;
    DECLARE W_SQLTEXT   CHAR(100) CCSID EBCDIC FOR SBCS DATA DEFAULT '1' ;

...failed to parse.

--2024-01-25--------------------------------------------------------------------
Applied fix from Martijn Rutte to sqlTableReturnStatement, which was to
insert...

	(WITH commonTableExpression (COMMA commonTableExpression)*)?

...into both "branches" of sqlTableReturnStatement parser rule.

--2023-12-27--------------------------------------------------------------------
Applied fix from Martijn Rutte to make the dssizeOption rule case insensitive.

--2023-12-10--------------------------------------------------------------------
Applied fix from Maarten van Haasteren to the actions in the dssizeOption rule
to more accurately point to the offending text.

--2023-12-08--------------------------------------------------------------------
Applied fix suggested by Martijn Rutte to allow for zero sqlStatement or zero
(sqlplProcedureStatement SQL_STATEMENT_TERMINATOR+) in startRule.  

--2023-12-07--------------------------------------------------------------------
Added parser action for dssizeOption suggested by Maarten van Haasteren to edit
for allowed values.

There are a number of other parser actions commented out as they are only
warning of deprecated features.  Not sure if this is desired.

Also altered sql_createIndex and sql_alterTablespace test cases as they were
now in error.

I should really have a test harness that deals with things that are 
intended to fail.  

--2023-12-04--------------------------------------------------------------------
Fixed problem found by Maarten van Haasteren, where DB2 tolerates both spaces
and newlines in special registers between CURRENT and any text that may
follow.

Changed the following...

CURRENT_ACCELERATOR
CURRENT_APPLICATION_COMPATIBILITY
CURRENT_APPLICATION_ENCODING_SCHEME
CURRENT_CLIENT_ACCTNG
CURRENT_CLIENT_APPLNAME
CURRENT_CLIENT_CORR_TOKEN
CURRENT_CLIENT_USERID
CURRENT_CLIENT_WRKSTNNAME
CURRENT_DATE
CURRENT_DEBUG_MODE
CURRENT_DECFLOAT_ROUNDING_MODE
CURRENT_DEGREE
CURRENT_EXPLAIN_MODE
CURRENT_GET_ACCEL_ARCHIVE
CURRENT_LOCALE_LC_CTYPE
CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION
CURRENT_MEMBER
CURRENT_OPTIMIZATION_HINT
CURRENT_PACKAGE_PATH
CURRENT_PACKAGESET
CURRENT_PATH
CURRENT_PRECISION
CURRENT_QUERY_ACCELERATION
CURRENT_QUERY_ACCELERATION_WAITFORDATA
CURRENT_REFRESH_AGE
CURRENT_ROUTINE_VERSION
CURRENT_RULES
CURRENT_SCHEMA
CURRENT_SERVER
CURRENT_SQLID
CURRENT_TEMPORAL_BUSINESS_TIME
CURRENT_TEMPORAL_SYSTEM_TIME
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_TIME_ZONE
ENCRYPTION_PASSWORD
SESSION_TIME_ZONE

...from [ ]+ to (WS | NEWLINE)+ for embedded spaces.

--2023-11-28--------------------------------------------------------------------
ANTLR 4.13.1 migration.

Thanks to Maarten van Haasteren for making the Makefile and ./src/tester script
portable across operating systems.

--2023-11-10--------------------------------------------------------------------
Maintenance per Martin Rutte...

Alteration to 2023-10-20 maintenance simplifying dsnutilUCSLoadLogOption and
making NOCOPYPEND into its own option.

Alter dsnutilUCSPunchddnOption to allow for argument in optional parentheses.

Alter dsnutilUCSUnloadSourceSpec to allow for alternate syntax without FROM.

--2023-11-03--------------------------------------------------------------------
Maintenance per Martin Rutte...

Alter dsnutilUCSYesOrNo to allow for optional parentheses.  The parentheses are
not necessarily in the IBM documentation syntax diagram, but they are tolerated
by DB2.

Alter dsnutilUCSStatsIndexSpecJustOne and dsnutilUCSStatTableSpecName1 to make 
parentheses optional.  The parentheses are not optional in the IBM 
documentation syntax diagram, but their absence is tolerated by DB2.

Added dsnutilUCSInvalidatecacheOption to 
dsnutilUCSRunstatsTablespaceStatisticsSpec.  It's not documented, but DB2
tolerates it.

Moved DSNUTIL_SKIP_LOCKED_DATA? from dsnutilUCSShrlevelChangeSpec3 
to dsnutilUCSIsolationCSOption for clarity.

--2023-10-24--------------------------------------------------------------------
Maintenance per Martin Rutte...

Alter dsnutilUCSWorkddnSpec to allow for WORKDDN arguments to not be enclosed 
in parentheses.  This is tolerated by DB2 13 but is not documented as far back 
as DB2 v6.
 
Alter dsnutilUCSCopyddnOption to allow for argument in optional parentheses.

Alter dsnutilUCSUnlddnOption to allow for argument in optional parentheses.

Alter dsnutilUCSShrlevelChangeSpec2 to allow (DSNUTIL_SHRLEVEL DSNUTIL_CHANGE) 
option on its own.  This is tolerated by DB2 13 but not documented.

Alter declareGlobalTemporaryTableStatement to add copyOptionColumnDefaults.

--2023-10-20--------------------------------------------------------------------
Maintenance per Martin Rutte...

Altered dsnutilUCSOptionsTemplateddOption rule to allow argument to be enclosed
in parentheses.  This is tolerated by DB2 but not documented.

Altered dsnutilUCSLoadLogOption rule to allow NOCOPYPEND to precede 
LOG (YES|NO).  This is tolerated by DB2 but not documented.

Added DSNUTIL_DB_TS_LPAREN to dsnutilUCSArgInParens rule to make TEMPLATEDD 
argument in optional parentheses work.

--2023-10-18--------------------------------------------------------------------
Maintenance per Martin Rutte...

Changed the definition of the following tokens in the lexer to include '\r' so
as to prevent a carriage return character from being mistakenly included.

DSNUTIL_IDENTIFIER
DSNUTIL_DSN_CHAR
DSNUTIL_DB_TS_IDENTIFIER
DSNUTIL_PAREN_IDENTIFIER

Everything after the statementName in an executeStatement is optional.

...and per IBM...

DB2 13 FL100 add RID and PAGE options to locate-table-space-spec

DB2 13 FL500 SET CURRENT LOCK TIMEOUT which complicated the
setSpecialRegisterStatement parser rule.

DB2 13 FL501 added DEADLOCK_RESOLUTION_PRIORITY test case.

--2023-09-25--------------------------------------------------------------------
Unhappy with the STRINGLITERAL changes in the 2023-06-06 version, I investigated
several other means of dealing with the third parameter of the SYSPROC.DSNUTILx
stored procedure supplied by IBM.

Attempts at finessing my way around the issue of apostrophe-delimited strings
containing apostrophe-delimited strings included writing a state machine to
count apostrophes, looking for the comma after an apostrophe, and various
other methods.  All either failed or were cumbersome and aesthetically
displeasing.

Ultimately, I embedded a lexer and parser rules for the DB2z online Utility
Control Statements in the existing lexer and parser.  The embedded lexer is
a set of ANTLR modes entered when the third parameter of SYSPROC.DSNUTILx is
detected.  The embedded parser rules begin with "dsnutil".

The implemented mechanism is more robust and offers the ability to examine and
process DB2z online Utility Control Statements programmatically.

The "entry point" to the embedded lexer is the DSNUTIL_MODE mode.  Extensive
use of lexer API calls is made to control transfers between the DSNUTIL_*
modes.  There are commented out ->type(DSNUTIL_IDENTIFIER) ANTLR statements
as I was uncertain if the utility of being able to identify which mode was
current outweighed that of simplicity in writing parser rules.  In the end,
ease of debugging won out.

This does expand the use of Java code embedded in the lexer.  Anyone who wants
to generate for a different language will have a bit more work to do.

Interesting, at least to me, was that the DSNUTIL_EXEC_SQL ended up doing a
pushMode(DEFAULT_MODE), and thankfully DSNUTIL_ENDEXEC is different from the
standard END_EXEC token so it could just do a popMode.

I did end up reporting a number of discrepencies between examples and the
syntax diagrams to the IBM documentation stewards.

--2023-07-06--------------------------------------------------------------------
Modified sqlTableFunctionDefinition to use sqlTableReturnStatement instead of
sqlRoutineBody per Martijn Rutte.

--2023-06-12--------------------------------------------------------------------
Added SQL? before COLUMNS in xmltableFunctionSpecification.  It's not in the
IBM documentation, but DB2 accepts it.

Per Martijn Rutte.

--2023-06-09--------------------------------------------------------------------
Added optimizeClause to selectIntoStatement and changed the optionality of 
(isolationClause | skipLockedDataClause | optimizeClause) from ? to * as per
the documentation.

--2023-06-06--------------------------------------------------------------------
Major changes.

Eliminated the CREATE_OR_ALTER_PROCEDURE_OR_FUNCTION_MODE mode which was for
toleration of SQL/PL.  In its place, I've implemented the grammar for SQL/PL.

Extensive testing by Martijn Rutte and Michel A. G. Poppema gave rise to a
number of other changes.

alterIndexStatement changed so the COMMA between alterIndexPartitionOptions
is optional.

alterSequenceOptionList changed so the COMMA between alterSequenceOptionList
is optional.

createIndexStatement changed to allow for obsolete but still tolerated TYPE 1
and TYPE 2 indexes.  Martijn Rutte checked with IBM and they said this went
away with DB2 for z/OS version 6.

createSequenceStatement changed so the COMMA between createSequenceOptionList
is optional.

grantTableStatement corrected to allow comma separated list of tables.

dropTriggerClause changed to allow the obsolete but still tolerated RESTRICT 
keyword.  Martijn Rutte checked with IBM and they said this keyword does nothing
and was deleted in DB2 for z/OS version 6.

createTableColumnDefinition and columnDefinitionOptions refactored to allow the
options to be specified in any order.  Also added forDataQualifier as it can 
appear after NOT NULL and still be syntactically valid, contrary to the syntax 
diagram.

fieldprocClause changed to have the arguments to the programName be optional,
as per the syntax diagram.

asResultTable corrected to make the list of columns in parentheses optional.

inlineSqlScalarFunctionDefinition added ccsidClause1 and forDataQualifier.
This allows the forDataQualifier and ccsidClause1 phrases to be
reversed from how they are defined in functionBuiltInType.

compiledSqlScalarFunctionDefinition added ccsidClause1 and forDataQualifier.
This allows the forDataQualifier and ccsidClause1 phrases to be
reversed from how they are defined in functionBuiltInType.

alterIndexPartitionOptions made ALTER optional per alternate syntax.

partitionElement changed to allow PART in place of PARTITION.

procedureBuiltinType changed CHAR and CLOB from ccsidClause1? 
forDataQualifier? to (ccsidClause1 | forDataQualifier)* to allow the clauses 
to be in any order.

startOption non-numeric literals are now allowed.

alterTableOptionList added | (uniqueConstraint) as it seems to be allowed.

periodDefinition made (EXCLUSIVE | INCLUSIVE) optional as per documentation.

expression changed so expression is optional in...

	((operator | INTEGERLITERAL) expression?)

...This allows for...

  SET C1 = SUBSTR(C2,LENGTH(C2)-1);

...due to the -1 being output from the lexer as one token (INTEGERLITERAL)
instead of two (operator INTEGERLITERAL).

sequenceReference changed to allow for alternate syntax with NEXTVAL and
PREVVAL and (sequenceName DOT (NEXTVAL | CURRVAL)).

extractFunction added.  This builtin function was incorrectly presumed to be
included via the generic function definition.  Its syntax is sufficiently
different that it was not.

timeZoneSpecificExpression changed to add integerInParens? and 
| ((WITH | WITHOUT) TIME ZONE).

timeZoneExpressionSubset added | (LPAREN expression RPAREN) per documentation.

castBuiltInType modified to allow forDataQualifier on CHAR and CLOB types.

triggerName modified to allow (schemaName DOT)?

dataChangeTableReference changed to actually be correct per documentation.

fetchClause changed to allow LIMIT syntax and to allow for a variable number
of rows to be fetched.

In the lexer, END_CASE has been changed to allow for NEWLINEs and not just
WS between END and CASE.

Also in the lexer, ]] is now a valid concatenation operator.

Also in the lexer, STRINGLITERAL has become more complex as it must handle
undoubled apostrophes embedded within literals delimited by apostrophes.  Take
a look at the SYSPROC.DSNUTILV test cases in testdata/sql_call for details.

--2023-04-06--------------------------------------------------------------------
Added CP_PREPARE token to probablySQLPL parser rule.  Martijn Rutte discovered
that if the body of a native SQL stored procedure contains a PREPARE statement
it results in a parse error...

    mismatched input 'PREPARE' expecting {<EOF>, ';', END_EXEC, 
    SQL_STATEMENT_TERMINATOR}

...so the simplest solution was to just add CP_PREPARE to the probablySQLPL
parser rule.

PREPARE was not caught as a CP_UNIDENTIFIED token because it is a valid
option on the CREATE PROCEDURE statement.  It appears to be unique in the 
sense that there is a PREPARE statement and there is a PREPARE option.

The sql_createProcedureSQLPL test case has been modified to include a test for
having a PREPARE statement in the body of the procedure.

--2023-03-15--------------------------------------------------------------------
Added alternate syntax '!!' (as BANG BANG because it amused me) for CONCATOP 
token in lexer.  This is somewhat obscurely documented by IBM in a footnote on
the page documenting "Expressions with the concatenation operator" as x'5A5A'.
IBM also documents x'BBBB' (two right brackets, ']]') as an allowable 
concatenation operator outside of an array-index expression.  I'm not going to
allow it here as it seems like the sort of thing that would cause more trouble
than it is worth.  Particulary since IBM also says that the CONCAT function is
preferable to any of the concatenation operators.

Removed the alternate syntax for setting the statement terminator...

    #terminator
    
...as it is not needed per Martijn Rutte.

--2023-02-10--------------------------------------------------------------------
ANTLR 4.11.1 migration.  Makefile, manifest file, tester script modified to use
new antlr-4.11.1-complete.jar file.  DB2zSQL.jar regenerated.


--2023-01-31--------------------------------------------------------------------
Fixed typo in lexer rule NODEFER.

--2023-01-25--------------------------------------------------------------------
Added parser rule xmlParseSpecification as the XMLPARSE function has its own
syntax, different from other scalar functions.  This fixes a problem found by
Martijn Rutte.

Added test cases specifically for XMLPARSE.

--2023-01-24--------------------------------------------------------------------
Corrected xmlCastSpecification to add LPAREN and RPAREN per Martijn Rutte's
discovery that XMLCAST invocations did not parse correctly.

Added test cases specifically for XMLCAST.

--2023-01-12--------------------------------------------------------------------
Corrected...

	(INNER | ((LEFT | RIGHT | FULL) OUTER?))

...to be optional preceding JOIN in the tableReference rule.

Changed lexer rule SQLIDENTIFIER from...

	[a-zA-Z0-9@#$\-_]+

...to...

	[a-zA-Z0-9@#$_]+

...to prevent syntax such as...

	LENGTH('XYZ') -LENGTH('X')

...from causing havoc as -LENGTH was recognized as an SQLIDENTIFIER instead
of a MINUS token and a LENGTH token.

Also, this is more in line with IBM's documentation.
However, I did also have to alter the rules for hostLabel, hostIdentifier,
hostStructure, nullIndicator, and nullIndicatorStructure to account for the
removal of the hyphen character from SQLIDENTIFIER.  Previously, these all
merely referenced the identifier rule.

--2023-01-11--------------------------------------------------------------------
Precipitated by Martijn Rutte pointing out that...

	ALTER TABLE "T1" ADD COLUMN C1 TIMESTAMP;

...failed to parse correctly, I did the following.

Changed definition of sqlidentifier from...

	SQLIDENTIFIER

...to...

	(SQLIDENTIFIER | NONNUMERICLITERAL)

...because that's what the documentation says.  It actually says more than that,
but right now I'm going to exclude support for DBCS names.  And 
NONNUMERICLITERAL is a bit more liberal than perhaps it should be, but that's
probably okay.

Changed definition of columnName from...

	(((correlationName | tableName) DOT)? (identifier1 | NONNUMERICLITERAL))

...to...

	(((correlationName | tableName) DOT)? identifier1)

...because identifier1 references sqlidentifier and the above change takes
care of that.

--2023-01-09--------------------------------------------------------------------
The alterFunction* rules were a mess.  They've been cleaned up in the process
of adding SQL/PL toleration to CREATE FUNCTION and ALTER FUNCTION.

Speaking of adding SQL/PL toleration to CREATE FUNCTION and ALTER FUNCTION,
SQL/PL toleration has been added to CREATE FUNCTION and ALTER FUNCTION.  The
CREATE_OR_ALTER_PROCEDURE_MODE lexer mode has been repurposed to tolerate
SQL/PL in CREATE or ALTER of FUNCTIONs or PROCEDUREs.

Changed hard-coded debugOption and nullInputOption2 in procedureOptionList
to use their parser rule equivalents.  Hopefully this isn't too painful for 
anyone.

Corrected builtInType, procedureBuiltinType and functionBuiltinType making 
(integerInParens | (LPAREN RPAREN)) optional for DECIMAL, DEC, NUMERIC, and
FLOAT as documented.

Fixed CREATE AUXILIARY TABLE changing databaseName? to (databaseName DOT)? 
prior to tablespaceName.

Corrected defaultClause, making...

	(defaultClauseAllowables
	| (distinctTypeCastFunctionName LPAREN defaultClauseAllowables RPAREN))

...optional because it wasn't by my mistake.

Corrected partitionExpression, making...

	(ASC | DESC)

...optional because it wasn't and it should be.

Changed partitionLimitKey from...

	(INTEGERLITERAL | MAXVALUE | MINVALUE)

...to...

	(literal | MAXVALUE | MINVALUE)

...because the literal must match the data type of the column
it references.

Made FROM optional in searchedDelete and positionedDelete, 
this is an alternate syntax allowed by IBM for compatibility with other DBMSs.

Added pagenumClause to createTablespaceOptionList.

Made...

	(asIdentityClause | asRowChangeTimestampClause)

...optional in generatedClause, as it should be per the documentation.

Made...

	(LPAREN columnName (COMMA columnName)* RPAREN)

...optional in commonTableExpression, as it should be per the documentation.

The...

	(LPAREN columnName (COMMA columnName)* RPAREN)

...has been made optional in createViewStatement.

Added..

	| (referentialConstraint)

...to alterTableOptionList as it seems to be allowed on its own.

Moved CREATE TABLE options to their own createTableOptions rule so
they could be in any order.

Need for above 10 corrections found by Martijn Rutte 2023-01-09 
and 2023-01-10.

Changed sqlStatement from...

	(SQL_STATEMENT_TERMINATOR | SEMICOLON | (END_EXEC DOT?) | EOF)

...to...

	(SQL_STATEMENT_TERMINATOR+ | SEMICOLON+ | (END_EXEC DOT?) | EOF)

...as multiple statement terminators or semicolons would end parsing and the
rest of the input would go unnoticed.

Added CARDINALITY? to customVolatileClause because it's documented that way...
now.  I know I researched this and remember doing searches of the documentation
back in late July of 2022 and found nothing.  Maybe it's just my old age.

--2023-01-03--------------------------------------------------------------------
Changed...

	(expression (operator expression)*)

...to...

	(expression ((operator expression) | INTEGERLITERAL)*)
	
...in parser rule valuesList1 to deal with hitherto unseen syntax...

	INSERT INTO WEATHER VALUES
		(NEWCW.CITY, 
		1.8*NEWCW.TEMPC+32)

...where +32 was lexed as a single token, breaking the
parser rule valuesList1.  I don't have access to a DB2
instance to test if this is a problem with the test case
or not, so here we are.  If you're writing an interpreter
you'll have to deal with this modified rule's handling
of an optional operator.

--2022-12-28--------------------------------------------------------------------
Added toleration for SQL/PL in ALTER and CREATE PROCEDURE statement rules per 
suggestion by Martijn Rutte.

This entailed adding ANTLR lexer modes for native SQL and external stored
procedures, and new parser rules for ALTER and CREATE of native SQL stored
procedures.

Instead of native SQL stored procedure ALTER and CREATE resulting in error
messages, the SQL/PL embedded in the statements ends up falling into a parser
rule named sqlRoutineBody which contains the tokens in the rule probablySQLPL.
WRAPPED SQL/PL is found in the rule obfuscatedStatementText which again
contains the tokens (such as they are) in the probablySQLPL rule.

--2022-12-06--------------------------------------------------------------------
Removed '+' modifier in freeBlock per suggestion by Martijn Rutte.  Its absence
makes rule processing easier.

--2022-12-06--------------------------------------------------------------------
Refactored usingSpecification2 to place stogroupOptions into their own rule per
suggestion by Martijn Rutte.  This makes processing via SonarQube more concise.

--2022-11-04--------------------------------------------------------------------
Issue 125 Changed usingSpecification1 to usingBlock for consistency in rules
alterIndexOptions and alterIndexPartitionOptions.

Changed subrule operator for alterPartitionClause rule in 
alterTablespaceStatement rule from ? (0 or 1 allowed) to * (0 or more allowed) 
per documentation.  Noticed whilst working on issue 125.

Added test cases for the above to sql_alterIndex and sql_alterTablespace.

--2022-11-03--------------------------------------------------------------------
Issue 124 partitionByRangePartitionPhrase rule should reference 
usingSpecification2 instead of usingBlock.

--2022-11-02--------------------------------------------------------------------
Maarten van Haasteren noticed the createTablespaceOptionList rule should
reference usingSpecification2 instead of usingBlock.

--2022-08-17--------------------------------------------------------------------
IBM responded to the request for a documentation update regarding the PIECESIZE
<integer>[K|M|G] syntax with an update indicating that _all_ such forms can
have whitespace between the <integer> and the [K|M|G].  So a number of rules
in DB2zSQLParser.g4 have been updated and tagged with #KMG.  Also, the length
rule has been modified to reflect this update, and the *builtInType rules have
been modified to use the length rule for BLOBs.

Test cases have been added to sql_alterTable, sql_createTable, and 
sql_createFunction.

--2022-08-05--------------------------------------------------------------------
Added lexer rule for SPUFI command...

--#SET TERMINATOR character

...by request to assist in processing SQL intended to be executed via SPUFI.

This rule works in concert with added SQL_STATEMENT_TERMINATOR rule to allow
the dynamic alteration of the SQL statement terminator from its default of
a semicolon.

Note that due to national characters (@, #, and $) being in the regex for the
SQLIDENTIFIER token, the character set as the SQL_STATEMENT_TERMINATOR must be
preceded by whitespace or it may be recognized instead as part of an 
SQLIDENTIFIER.  So...

--#SET TERMINATOR @
GRANT SELECT ON UMBRELLA_ACADEMY TO BEN@

...may cause problems as the @ will be slurped up as part of the SQLIDENTIFIER
grantee, where...

--#SET TERMINATOR @
GRANT SELECT ON UMBRELLA_ACADEMY TO NUMBER5 @

...will work just fine due to the whitespace before the @.

Also modified piecesizeOption rule to allow for...

PIECESIZE 4K

...and...

PIECESIZE 4 K

...which are both syntactically correct.  Documentation correction
request submitted to IBM on 05-Aug-2022.  Thanks to Maarten van
Haasteren and Martijn Rutte for pointing this out.

--2022-07-29--------------------------------------------------------------------
Modified createTableInClause rule to allow for requested syntax...

CREATE TABLE [...]
(NOT? VOLATILE)? IN (databaseName DOT)? tablespaceName (NOT? VOLATILE)?

...which is not documented as far back as DB2 9, and I could not locate 
documentation for versions of DB2 prior to that.  So I'm presuming this is
old syntax, old enough that IBM no longer documents it, but not so old that
IBM doesn't allow for it.  Sort of like the SEP parameter of the JCL DD
statement.

Added testdata/sql_createTableCustomVolatile and 
testdata/sql_createTableCustomVolatile1 to test both this, and an error in the
DB2zSQLParser.g4 grammar reported by the same nice folks in the same rule.  I
had erroneously left out the DOT between the optional databaseName and the
tablespaceName.  Corrected testdata/sql_createTable to test this.

--2022-06-02--------------------------------------------------------------------
Added scalar functions

AI_ANALOGY
AI_SEMANTIC_CLUSTER
AI_SIMILARITY

...and their syntax to DB2zSQLLexer.g4 and DB2zSQLParser.g4.

Added testdata/sql_aiFunction to test these.

