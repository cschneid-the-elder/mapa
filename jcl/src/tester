#!/bin/bash

function testLexAndParse {

	while read line
	do
		java -cp ./JCLParserCLI.jar org.antlr.v4.gui.TestRig cschneid.mapa.jcl.$kind startRule -tokens < $line 1>/dev/null 2>$tmp02
		grep -v '^\[' $tmp02
		if [ "$?" -eq 0 ]
		then
			export myRC=12
		else
		echo $line " OK"
		fi
		export filePart=${line: -8}
		export numPart=${filePart:0:4}
		java -cp ./JCLParserCLI.jar org.antlr.v4.gui.TestRig cschneid.mapa.jcl.$kind startRule -tree < $line | ./src/treeCount -vruleName=test$numPart -vruleType=$kind
		export myRC1=$?
		if [ "$myRC1" -gt "$myRC" ]
		then
			export myRC=$myRC1
		fi
	done < $tmp01

}

function testDemo {

	if [ "$nval" = "*" ]
	then
		java -jar JCLParserCLI.jar -fileList "$tmp01" -include testdata -set SYSUID=CSCHNEID -outtree testdata.tsv -outcsv testdata.csv -cntlList cntlList1 1>"$tmp02"
	else
		java -jar JCLParserCLI.jar -fileList "$tmp01" -include testdata -set SYSUID=CSCHNEID -outtree test"$nval".tsv -outcsv test"$nval".csv -cntlList cntlList1 -logLevel FINEST -saveTemp 1>"$tmp02"
	fi
	if [ -s "$tmp02" ]
	then
		export myRC=12
		cat "$tmp02"
	fi

}

case "$OSTYPE" in
  solaris*) echo "SOLARIS" ;;
  darwin*)  echo "OSX" ;;
  linux*)   echo "LINUX" ;;
  bsd*)     echo "BSD" ;;
  msys*)    echo "WINDOWS" ;;
  cygwin*)  echo "ALSO WINDOWS" ;;
  *)        echo "unknown: $OSTYPE" ;;
esac

export sep=":"
if [[ "$OSTYPE" == "msys"* ]]; then
  export sep=";"
fi

case $2 in
pp)		export kind="JCLPP"
		export sufx="jcl"
  ;;
x)		export kind="JCL"
		export sufx="jcl"
  ;;
tso)	export kind="TSO"
		export sufx="tso"
  ;;
amp)	export kind="JCLDDAMP"
		export sufx="amp"
  ;;
demo)	export kind="DEMO"
		export sufx="jcl"
		export nval="$1"
  ;;
*)   echo "I am baffled as to what to do with $2"
     exit 16
  ;;
esac

echo "testing kind = " $kind

STARTTIME=$(date +%s)
export myRC=0
export tmp01=/tmp/$(date +%Y%m%d%H%M%S).$$.mapajcl01
export tmp02=/tmp/$(date +%Y%m%d%H%M%S).$$.mapajcl02
if [ "$1" = "all" ]
then
  ls -Al testdata/test0*.$sufx | awk '{print $9}' > $tmp01
else
  ls -Al testdata/test$1.$sufx | awk '{print $9}' > $tmp01
fi

if [ "$kind" = "DEMO" ]
then
	if [ "$1" = "all" ]
	then
	  echo "testdata/test9004.jcl" >> $tmp01
	  echo "testdata/test9007.jcl" >> $tmp01
	  echo "testdata/test9011.jcl" >> $tmp01
	  echo "testdata/test9012.jcl" >> $tmp01
	  echo "testdata/test9013.jcl" >> $tmp01
	  echo "testdata/test9014.jcl" >> $tmp01
	  echo "testdata/test9015.jcl" >> $tmp01
	  echo "testdata/test9016.jcl" >> $tmp01
	  echo "testdata/test9017.jcl" >> $tmp01
	  echo "testdata/test9018.jcl" >> $tmp01
	  echo "testdata/test9019.jcl" >> $tmp01
	  echo "testdata/test9020.jcl" >> $tmp01
	  echo "testdata/test9022.jcl" >> $tmp01
	  echo "testdata/test9023.jcl" >> $tmp01
	  echo "testdata/test9024.jcl" >> $tmp01
	fi
	testDemo
else
	testLexAndParse
fi

rm $tmp01
rm $tmp02

ENDTIME=$(date +%s)

echo "elapsed time $(($ENDTIME - $STARTTIME)) seconds"

exit $myRC

