--2024-10-15--------------------------------------------------------------------
ANTLR 4.13.2, Makefile manifest, and src/tester changes.

--2024-06-03--------------------------------------------------------------------
Removed unused tokens...

CNVTSYS
EXECSYS
JCLONLY
LOGGING_DDNAME
DATASET_NAME
EXEC_PARM_STRING
DEST_VALUE

...from tokenSpec in both JCLLexer.g4 and JCLPPLexer.g4 as there were no 
->type() commands referring to them.


--2024-06-02--------------------------------------------------------------------
Actually added src/sql_mapa_sample_table_ddl and src/mapaOutputSplit mentioned
in the 2024-05-18 change.  Omitted via carelessness.

Modified UNQUOTED_STRING to be a fragment and added "," to the excluded
characters, allowing this formerly unused token to be used in place of six
other patterns, all the same.

Renamed test0193.jcl to test9023.jcl and test0194.jcl to test9024.jcl as it
works better with the src/tester script.  These are supposed to error out
and the naming convention is that the test0* scripts are all supposed to
parse correctly.  test9024.jcl is EBCDIC.

Removed unused tokens NULLFILE and IF_REL_EXP_KEYWORD.

--2024-05-24--------------------------------------------------------------------
Added a cursory check to try and ensure the input is both JCL and UTF-8 by
verifying the first two bytes are "//".  If they are not, the file is not
processed.

--2024-05-18--------------------------------------------------------------------
Added src/sql_mapa_sample_table_ddl which contains sample DDL to create RDBMS 
tables to hold the CSV output.

Added src/mapaOutputSplit to split the CSV output into separate files suitable
for loading into the RDBMS tables defined in src/sql_mapa_sample_table_ddl.

Fixed a bug in Demo01.java where the processing timestamp was not added to
the FILE record if only a PROC is present in the input file.

Modified the CSV output to align with the RDBMS tables' referential integrity.
So there are now more output types.

Some documentation updates.

--2024-04-19--------------------------------------------------------------------
Much to my surprise JOBLIB is not a reserved name.  I always thought JOBLIB and
SYSCHK and maybe STEPLIB were only allowed as DD names.  But Amazon's carddemo
application teaches us many lessons, and the jcllibStatement parser rule in
both the JCLParser.g4 and the JCLPPParser.g4 grammars has been altered to allow
the name on a JCLLIB statement to be these formerly presumed reserved names.

The rewriteWithoutCol72to80 method in Demo01.java and PPJclStep.java has had 
code added to not continue comments where they are syntactically indicated to
not be continued.  Okay that's not very clear, so let's expand that a bit.

What I've done is modify the rewriteWithoutCol72to80 methods to _not_ continue 
an inline comment when position 3 contains a non-blank character,indicating 
that statement has a name field and is thus obviously intended to _not_ be a 
comment continuation.

Also, rewriteWithoutCol72to80 exists in two places?  WTF?

Added some documentation for what I did to process the Amazon carddemo sample
application.  This might be instructive for what may be necessary to process
your own applications.

--2024-04-17--------------------------------------------------------------------
Rebuild after local drive failure.

Added "init" target to Makefile.

Added Maarten van Haasteren's OS-neutral path/classpath separator logic to
the src/tester script.

--2024-02-01--------------------------------------------------------------------
Added ABDISPCC EXEC statement parameter.

--2023-11-28--------------------------------------------------------------------
ANTLR 4.13.1 migration.

--2023-03-03--------------------------------------------------------------------
Issue 147 mitigation.

Added ERROR_CHAR* tokens to JCLLexer.g4 and JCLPPLexer.g4.  Added errorChars
rule to JCLParser.g4 and JCLPPParser.g4.  This was to transfer unrecognized
token errors to the parser, where I could catch them with a custom error
listener.

Substituted CatchableErrorListener for StdoutParserErrorListener in methods
lexAndParsePP() and lexAndParse() in Demo01.java.  This way, both unrecognized
and unexpected tokens are caught programmatically.

Modified the execJCL rule in the parser grammars to allow for 
delimiterStatements placed between jclSteps.  Oddly, a side effect is that
files containing large numbers of outputStatements take significantly longer
to parse.

Wrapped the ParseTreeWalker.walk() execution in a try/catch block in an attempt
to trap anything I've overlooked.

Checked for size() == 0 of both jobs and procs arrays in main processing loop
in Demo01.java to catch parsing errors taking place after preprocessing.

Added a check in PPListener.java and JobListener.java to check for errorChars
and throw away any jobs or procs which may have otherwise passed parsing.  Yet
another mechanism to allow for bad input yet continue processing.

Modified JCLPPLexer.g4 and JCLLexer.g4 to disallow emitting an EXEC_PROC_PARM
if an EXEC PGM= exec statement is being processed.  This means statements
such as EXEC PGM=IEFBR14,Q (which is invalid) will have the bad characters
show up in the errorChars rule in the parser.

Added errorChars in a couple of strategic spots in JCLLexer.g4 to help
parsing continue even in the event of syntax errors.  But you can definitely
still mess things up with a badly formatted jobcard.

The overall effect of all this should be to continue processing despite 
unexpected input (say, a COBOL or C program) and any oversights in the grammars
or the listeners. 

Added several test cases to test for trailing spaces in jobcard, jcllib, and
exec parameters, and several others for testing bad syntax.  This is probably
not exhaustive.

Also, corrected a weakness in jobcard parsing; comma-separated parameters 
enclosed in parentheses were sent to the parser without the separating commas.  
The jobCard rule has been modified to allow for the commas.

--2023-02-10--------------------------------------------------------------------
ANTLR 4.11.1 migration.  Makefile, manifest file, tester script modified to use
new antlr-4.11.1-complete.jar file.  JCLParser.jar regenerated.

--2023-02-04--------------------------------------------------------------------
Added obsolete DD DCB parameters BUFRQ, CODE, and SOWA.  The first and last
are for QTAM only, the second is for paper tape.  My guess is these are still
tolerated, so just in case someone is processing ancient JCL I added them.

--2023-02-03--------------------------------------------------------------------
Added ROLL parameter to JOB and EXEC statements.  This is old, obsolete, and
still tolerated.

Added HIARCHY parameter to DD statement.  This is old, obsolete, and probably
still tolerated.

--2022-03-03--------------------------------------------------------------------
Added PROCLIB parameter to JCLLIB statement.  No idea how
I missed that as it's been there since z/OS 2.1.

Also added ddParmASTERISK_DATA* to the end of the jclStep rule
in JCLParser.g4, the treecount-jcl.db file was incorrect
for test0177.jcl and luckily the preprocessor grammar was
correct so I caught the problem.

Also modified...

src/Job.java
src/PPDdStatement.java
src/PPDdStatementAmalgamation.java
src/PPJclStep.java
src/PPJob.java
src/TheCLI.java

...to account for the inexcusable deprecation of _all_ of
the constructors for Integer.  "Boxing" indeed.
